@page "/products"
@attribute [Authorize]
@inherits ContainerComponentBase
@inject EsquioState State

<PageTransition>
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <PageTitle Title="Products"
                            Subtitle="Show the Esquio Products in the store.">
                    <Icon>
                        <i class="fas fa-box-open"></i>
                    </Icon>
                    <Actions>
                        <Permission Requires="PolicyAction.Create" Over="PolicySubject.Product">
                            <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenModal">
                                New Product
                            </button>
                        </Permission>
                    </Actions>
                </PageTitle>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <Table Loader="Loader"
                            Total="@(items => items.Total)"
                            Count="@(items => items.Count)"
                            SkeletonColumns="skeletonColumns"
                            SkeletonActions="skeletonActions"
                            @ref="table">
                        <TableHeader>
                            <th class="table-col-4">Name</th>
                            <th>Description</th>
                            <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Product">
                                <th class="table-col-2"></th>
                            </Permission>
                        </TableHeader>
                        <TableBody Context="products">
                            @foreach (var product in products.Result)
                            {
                                <tr @onclick="@(e => NavigateTo($"products/{product.Name}"))">
                                    <td>@product.Name</td>
                                    <td>@product.Description</td>
                                    <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Product">
                                        <td class="table-component__action">
                                            <Button Title="Delete"
                                                    Icon="far fa-trash-alt"
                                                    OnClick="@(() => Delete(product.Name))" />
                                        </td>
                                    </Permission>
                                </tr>
                            }
                        </TableBody>
                    </Table>
                </div>
            </div>
        </div>
    </section>
</PageTransition>

<Modal Title="New Product" Show="showModal" OnClose="CloseModal">
    <ModalBody>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="product-name">Name</label>
                <InputText id="product-name" class="form-control" @bind-Value="model.Name" placeholder="Enter product name" />
            </div>

            <div class="form-group">
                <label for="product-description">Description</label>
                <InputText id="product-description" class="form-control" @bind-Value="model.Description" placeholder="Enter product description" />
            </div>

            <div class="form-group">
                <label for="product-default-ring-name">Default Ring Name</label>
                <InputText id="product-default-ring-name" class="form-control" @bind-Value="model.DefaultRingName" placeholder="Enter product default ring name" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddProduct" disabled="@formInvalid">Save changes</button>
    </ModalFooter>
</Modal>

@code {
    private bool showModal;
    private bool formInvalid;
    private int skeletonColumns = 2;
    private int skeletonActions = 0;
    private ProductViewModel model;
    private EditContext editContext;
    private Table<ListProductResponse> table;

    protected override void OnInitialized()
    {
        InitModel();

        State.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "/" },
            new BreadcrumbItemViewModel { Title = "Products", Active = true });

        if (State.Policy.Can(PolicyAction.Delete, PolicySubject.Product))
        {
            skeletonColumns += 1;
            skeletonActions += 1;
        }
    }

    private void InitModel()
    {
        formInvalid = true;

        if (editContext != null)
        {
            editContext.OnFieldChanged -= OnFieldChanged;
        }

        model = new ProductViewModel();
        editContext = new EditContext(model);
        editContext.OnFieldChanged += OnFieldChanged;
    }

    private Task<ListProductResponse> Loader(int pageIndex, int pageCount)
    {
        return Client.Products_ListAsync(pageIndex, pageCount);
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs args)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    private async Task AddProduct()
    {
        await Client.Products_AddAsync(model.ToRequest());
        await table.OnAdd();

        CloseModal();
        InitModel();
    }

    private async Task Delete(string productName)
    {
        await Client.Products_DeleteAsync(productName);
        await table.OnDelete();
    }

    private void OpenModal()
    {
        showModal = true;

        State.IsApplicationShowingWindowModal(showModal);
        
    }

    private void CloseModal()
    {
        showModal = false;

        State.IsApplicationShowingWindowModal(showModal);
    }
}
