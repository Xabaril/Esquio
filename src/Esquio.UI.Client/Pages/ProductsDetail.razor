@page "/products/{productName}"
@attribute [Authorize]


@inject IEsquioHttpClient esquioHttpClient
@inject EsquioState  esquioState
@inject NavigationManager navigation

<PageTransition>
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="bottom-spacing">@ProductName</h1>
                </div>
            </div>
            <div class="row mb-2">
                <PageTitle Title="Features"
                            Subtitle="Show the collection of active features on current product.">
                    <Icon>
                        <i class="fas fa-magic"></i>
                    </Icon>
                    <Actions>
                        <Permission Requires="PolicyAction.Create" Over="PolicySubject.Feature">
                            <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenNewFeatureModal">
                                New Feature
                            </button>
                        </Permission>
                    </Actions>
                </PageTitle>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <PaginatedTable Loader="FeatureLoader"
                                    SkeletonColumns="featuresSkeletonColumns"
                                    SkeletonActions="featuresSkeletonActions"
                                    @ref="featuresTable">
                        <TableHeader>
                            <th class="table-col-4">Name</th>
                            <th>Description</th>
                            <Permission Requires="PolicyAction.Update" Over="PolicySubject.Feature">
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                            </Permission>
                            <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Feature">
                                <th class="table-col-1"></th>
                            </Permission>
                        </TableHeader>
                        <TableBody Context="features">
                            @foreach (var feature in features.Items)
                            {
                            <tr>
                                <td>@feature.Name</td>
                                <td>@feature.Description</td>
                                <Permission Requires="PolicyAction.Update" Over="PolicySubject.Feature">
                                    <td>
                                        <Switch Title="Enable/Disable"
                                                Checked="feature.Enabled"
                                                OnChange="@(() => ToggleFeature(feature))">

                                        </Switch>
                                    </td>
                                    <td class="table-component__action">
                                        <Button Title="Rollout"
                                                Icon="fas fa-upload"
                                                OnClick="@(() => RolloutFeature(feature.Name))" />
                                    </td>
                                    <td class="table-component__action">
                                        <Button Title="Rolloff"
                                                Icon="fas fa-download"
                                                OnClick="@(() => RolloffFeature(feature.Name))" />
                                    </td>
                                    <td class="table-component__action">
                                        <Button Title="Archive"
                                                Icon="fas fa-archive"
                                                OnClick="@(() => ArchiveFeature(feature.Name))" />
                                    </td>
                                </Permission>
                                <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Feature">
                                    <td class="table-component__action">
                                        <Button Title="Delete"
                                                Icon="far fa-trash-alt"
                                                OnClick="@(() => DeleteFeature(feature.Name))" />
                                    </td>
                                </Permission>
                            </tr>
                            }
                        </TableBody>
                    </PaginatedTable>
                </div>
            </div>
        </div>
    </section>

    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <PageTitle Title="Rings"
                            Subtitle="Defined Rings on this product, Rings allow configure different Toggle values for each ring and test configurations on different ring/environments.">
                    <Icon>
                        <i class="fas fa-ring"></i>
                    </Icon>
                    <Actions>
                        <Permission Requires="PolicyAction.Create" Over="PolicySubject.Ring">
                            <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenNewRingModal">
                                New Ring
                            </button>
                        </Permission>
                    </Actions>
                </PageTitle>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <SingleTable Loader="RingsLoader" @ref="ringTable">
                        <TableHeader>
                            <th class="table-col-4">Name</th>
                            <th></th>
                            <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Ring">
                                <th class="table-col-1"></th>
                            </Permission>
                        </TableHeader>
                        <TableBody Context="response">
                            @foreach (var ring in response.Rings)
                            {
                            <tr>
                                <td colspan="2">
                                    @ring.Name
                                    @if (ring.Default)
                                    {
                                        <span class="badge badge-info">default ring</span>
                                    }
                                </td>
                                <Permission Requires="PolicyAction.Delete" Over="PolicySubject.Ring">
                                    <td class="table-component__action">
                                        @if (!ring.Default)
                                        {
                                            <Button Title="Delete"
                                                    Icon="far fa-trash-alt"
                                                    OnClick="@(() => DeleteRing(ring.Name))" />
                                        }
                                    </td>
                                </Permission>
                            </tr>
                            }
                        </TableBody>
                    </SingleTable>
                </div>
            </div>
        </div>
    </section>
</PageTransition>

<Modal Title="New Feature" Show="showNewFeatureModal" OnClose="CloseNewFeatureModal">
    <ModalBody>
        <EditForm EditContext="@newFeatureEditContext">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="feature-name">Name</label>
                <InputText id="feature-name" class="form-control" @bind-Value="newFeatureModel.Name" placeholder="Enter feature name" />
            </div>

            <div class="form-group">
                <label for="feature-description">Description</label>
                <InputText id="feature-description" class="form-control" @bind-Value="newFeatureModel.Description" placeholder="Enter feature description" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseNewFeatureModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddFeature" disabled="@newFeatureFormInvalid">Save changes</button>
    </ModalFooter>
</Modal>

<Modal Title="New Ring" Show="showNewRingModal" OnClose="CloseNewRingModal">
    <ModalBody>
        <EditForm EditContext="@newRingEditContext">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="ring-name">Name</label>
                <InputText id="ring-name" class="form-control" @bind-Value="newRingModel.Name" placeholder="Enter ring name" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseNewRingModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddNewRing" disabled="@newRingFormInvalid">Save changes</button>
    </ModalFooter>
</Modal>

@code {

    [Parameter] public string ProductName { get; set; }

    //Feature table parameters
    private int featuresSkeletonColumns = 2;
    private int featuresSkeletonActions = 0;

    //Feature form parameters
    private bool showNewFeatureModal = false;
    private bool newFeatureFormInvalid = true;
    private AddFeatureRequest newFeatureModel;
    private EditContext newFeatureEditContext;
    private PaginatedTable<ListFeatureResponseDetail> featuresTable;

    //Rings form parameters
    private bool showNewRingModal = false;
    private bool newRingFormInvalid = true;
    private AddRingRequest newRingModel;
    private EditContext newRingEditContext;
    private SingleTable<DetailsProductResponse> ringTable;

    protected override void OnInitialized()
    {
        InitFeatureModel();
        InitRingModel();

        esquioState.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Link = "products" },
            new BreadcrumbItemViewModel { Title = ProductName, Active = true });

        if (esquioState.Policy.Can(PolicyAction.Update, PolicySubject.Feature))
        {
            featuresSkeletonColumns += 4;
            featuresSkeletonActions += 4;
        }

        if (esquioState.Policy.Can(PolicyAction.Delete, PolicySubject.Feature))
        {
            featuresSkeletonColumns += 1;
            featuresSkeletonActions += 1;
        }
    }

    private void InitFeatureModel()
    {
        newFeatureFormInvalid = true;

        newFeatureModel = new AddFeatureRequest();
        newFeatureEditContext = new EditContext(newFeatureModel);
        newFeatureEditContext.OnValidationStateChanged += OnAddFeatureValidationChanged;
    }

    private void OpenNewFeatureModal()
    {
        InitFeatureModel();
        showNewFeatureModal = true;

        esquioState.SetWindowModal(showNewFeatureModal);
    }

    private void CloseNewFeatureModal()
    {
        showNewFeatureModal = false;
        newFeatureEditContext.OnValidationStateChanged -= OnAddFeatureValidationChanged;

        esquioState.SetWindowModal(showNewFeatureModal);
    }

    private void OnAddFeatureValidationChanged(object sender, ValidationStateChangedEventArgs args)
    {
        newFeatureFormInvalid = !newFeatureEditContext.IsValid();
        StateHasChanged();
    }

    private Task<PaginatedResult<ListFeatureResponseDetail>> FeatureLoader(int pageIndex, int pageCount)
    {
        return esquioHttpClient.GetProductFeaturesList(ProductName, pageIndex, pageCount);
    }

    private async Task ToggleFeature(ListFeatureResponseDetail feature)
    {
        var request = new UpdateFeatureRequest
        {
            Name = feature.Name,
            Description = feature.Description,
            Enabled = !feature.Enabled
        };

        await esquioHttpClient.ToggleFeature(ProductName, feature.Name, request);
        await featuresTable.Reload();
    }

    private async Task RolloutFeature(string featureName)
    {
        await esquioHttpClient.RolloutFeature(ProductName, featureName);
        await featuresTable.Reload();
    }

    private async Task RolloffFeature(string featureName)
    {
        await esquioHttpClient.RollbackFeature(ProductName, featureName);
        await featuresTable.Reload();
    }

    private async Task ArchiveFeature(string featureName)
    {
        await esquioHttpClient.ArchiveFeature(ProductName, featureName);
        await featuresTable.Reload();
    }

    private async Task AddFeature()
    {
        await esquioHttpClient.AddFeature(ProductName, newFeatureModel);
        await featuresTable.OnAdd();

        CloseNewFeatureModal();
        InitFeatureModel();
    }

    private async Task DeleteFeature(string featureName)
    {
        await esquioHttpClient.DeleteFeature(ProductName, featureName);
        await featuresTable.OnDelete();
    }

    private void InitRingModel()
    {
        newRingFormInvalid = true;

        newRingModel = new AddRingRequest();
        newRingEditContext = new EditContext(newRingModel);
        newRingEditContext.OnValidationStateChanged += OnAddRingValidationChanged;

    }

    private void OnAddRingValidationChanged(object sender, ValidationStateChangedEventArgs args)
    {
        newRingFormInvalid = !newRingEditContext.IsValid();
        StateHasChanged();
    }

    private void OpenNewRingModal()
    {
        showNewRingModal = true;
        InitRingModel();

        esquioState.SetWindowModal(showNewRingModal);
    }

    private void CloseNewRingModal()
    {
        showNewRingModal = false;
        newRingEditContext.OnValidationStateChanged -= OnAddRingValidationChanged;

        esquioState.SetWindowModal(showNewRingModal);
    }

    private Task<DetailsProductResponse> RingsLoader()
    {
        return esquioHttpClient.GetProduct(ProductName);
    }

    private async Task AddNewRing()
    {
        await esquioHttpClient.AddProductRing(ProductName, newRingModel);
        await ringTable.OnAdd();

        CloseNewRingModal();
        InitRingModel();
    }

    private async Task DeleteRing(string ringName)
    {
        await esquioHttpClient.DeleteProductRing(ProductName, ringName);
        await ringTable.OnDelete();

        CloseNewRingModal();
        InitRingModel();
    }
}
