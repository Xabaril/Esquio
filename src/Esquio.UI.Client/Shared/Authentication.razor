@page "/authentication/{action}"

@inject IAccessTokenProvider authenticationService
@inject NavigationManager navigation
@inject EsquioState esquioState


<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="IsUserAllowed">
</RemoteAuthenticatorView>

@code{
    [Parameter] public string Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action))
        {
            await EvaluateAuthorization(notAllowed: () =>
             {
                 navigation.NavigateTo("Forbidden");
             });
        }
    }

    async Task IsUserAllowed(RemoteAuthenticationState state)
    {
        await EvaluateAuthorization(notAllowed: () =>
         {
             state.ReturnUrl = "Forbidden";
         });
    }

    async Task EvaluateAuthorization(Action notAllowed)
    {
        var tokenResult = await authenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out AccessToken accessToken))
        {
            var my = await GetCurrentUserProfile(accessToken);

            if (my != null)
            {
                esquioState.SetPolicy(my);
            }
            else
            {
                notAllowed();
            }
        }
        else
        {
            navigation.NavigateTo(tokenResult.RedirectUrl);
        }
    }

    async Task<MyResponse> GetCurrentUserProfile(AccessToken token)
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(navigation.BaseUri);
        httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");

        try
        {
            return await httpClient.GetJsonAsync<MyResponse>("api/users/my");
        }
        catch (Exception)
        {
            return null;
        }
    }
}