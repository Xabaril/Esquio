@page "/authentication/{action}"
@inject IAccessTokenProvider AuthenticationService
@inject IEsquioClient Client
@inject EsquioState State

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager


<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="IsUserAllowed">
</RemoteAuthenticatorView>

@code{
    [Parameter] public string Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action))
        {
            await EvaluateAuthorization(notAllowed: () =>
             {
                 Navigation.NavigateTo("Forbidden");
             });
        }
    }

    async Task IsUserAllowed(RemoteAuthenticationState state)
    {
        await EvaluateAuthorization(notAllowed: () =>
         {
             state.ReturnUrl = "Forbidden";
         });
    }

    async Task EvaluateAuthorization(Action notAllowed)
    {
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out AccessToken accessToken))
        {
            var my = await GetCurrentUserProfile(accessToken);

            if (my != null)
            {
                State.SetPolicy(my);
            }
            else
            {
                notAllowed();
            }
        }
        else
        {
            Navigation.NavigateTo(tokenResult.RedirectUrl);
        }
    }

    async Task<MyResponse> GetCurrentUserProfile(AccessToken token)
    {
        try
        {
            return await Client.Users_MyAsync();
        }
        catch (Exception)
        {
            return null;
        }
    }
}